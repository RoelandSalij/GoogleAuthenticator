// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package googleauthenticator.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import com.warrenstrange.googleauth.GoogleAuthenticator;
import com.warrenstrange.googleauth.GoogleAuthenticatorKey;
import com.warrenstrange.googleauth.GoogleAuthenticatorQRGenerator;

/**
 * This action generates a secret key and the URL to scan a QR code in the Google Authenticator app.
 * 
 * * Application name is the name shown in Google Authenticator app.
 * 
 * * Username is the name shown in Google Authenticator app.
 *     
 * * Credentials object
 *     An object is required as input parameter and must contain the following attributes:
 *         - ga_SecretKey : String(200)
 *         - ga_OtpAuthURL : String(Unlimited)
 * 
 * The secretkey has to be used to authenticate a validation code generated by the Google Authenticator App.
 */
public class CreateCredentials extends CustomJavaAction<Boolean>
{
	private String ApplicationName;
	private String UserName;
	private IMendixObject CredentialsToSet;

	public CreateCredentials(IContext context, String ApplicationName, String UserName, IMendixObject CredentialsToSet)
	{
		super(context);
		this.ApplicationName = ApplicationName;
		this.UserName = UserName;
		this.CredentialsToSet = CredentialsToSet;
	}

	@Override
	public Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		GoogleAuthenticator gAuth = new GoogleAuthenticator();
		final GoogleAuthenticatorKey key = gAuth.createCredentials();
		
		String otpAuthURL = GoogleAuthenticatorQRGenerator.getOtpAuthURL(this.ApplicationName, this.UserName, key);
		
		CredentialsToSet.setValue(getContext(), "ga_SecretKey", key.getKey());	
		CredentialsToSet.setValue(getContext(), "ga_OtpAuthURL", otpAuthURL);
		
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "CreateCredentials";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
